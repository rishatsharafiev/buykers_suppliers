"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import pathlib
import datetime
from envparse import env

env.read_envfile()

# Base path
BASE_PATH = pathlib.Path(__file__).parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

SECRET_KEY = env('SECRET_KEY', cast=str, default='f)x_76pg46@omifv%=f0evs(4fiqkbr_k1p%nld2qtey8dyoc(')

DEBUG = env('DEBUG', cast=bool, default=False)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['*'])


# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'django_celery_beat',
    'django_celery_results',
    'django_celery_monitor',
    'raven.contrib.django.raven_compat',
]

LOCAL_APPS = [
    'apps.bpc'
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'conf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'conf.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('POSTGRES_DB_NAME', default=''),
        'USER': env('POSTGRES_DB_USER', default=''),
        'PASSWORD': env('POSTGRES_DB_PASSWORD', default=''),
        'HOST': env('POSTGRES_DB_HOST', default=''),
        'PORT': env('POSTGRES_DB_PORT', default=''),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = BASE_PATH / 'static'

# Media files (Images, Video, pdf, etc)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_PATH / 'media'

### Celery
# General settings
accept_content = ['application/json']
enable_utc = False
timezone = 'Europe/Moscow'

# Task settings
task_annotations = {'*': {'rate_limit': '10/s'}}
task_compression = 'gzip'
task_protocol = 2
task_serializer = 'json'
task_publish_retry = True
task_publish_retry_policy = {
    'max_retries': 3,
    'interval_start': 0,
    'interval_step': 0.2,
    'interval_max': 0.2,
}

# Task execution settings
task_always_eager = False
task_eager_propagates = False
task_remote_tracebacks = False
task_ignore_result = True
task_store_errors_even_if_ignored = False
task_track_started = False
task_time_limit = int(datetime.timedelta(days=1).total_seconds())
# task_soft_time_limit = None
task_acks_late = False
task_reject_on_worker_lost = False
# task_default_rate_limit = '1000/m'

# Task result backend settings
result_backend = env('CELERY_RESULT_BACKEND', cast=str, default='django-db') # django-db | redis://localhost
result_backend_transport_options = {'visibility_timeout': 18000}
result_serializer = 'json'
result_compression = 'gzip'
result_expires = int(datetime.timedelta(days=1).total_seconds())
result_cache_max = False

# Redis backend setting
redis_backend_use_ssl = False
# redis_max_connections = None
# redis_socket_connect_timeout = None
redis_socket_timeout = 120.0

# Message Routing
from kombu import Queue, Exchange
task_queues = {
    Queue(name='celery', exchange=Exchange('celery'), routing_key='celery', durable=True),
    Queue(name='high', exchange=Exchange('default'), routing_key='high', durable=True),
    Queue(name='normal', exchange=Exchange('default'), routing_key='normal', durable=True),
    Queue(name='low', exchange=Exchange('default'), routing_key='low', durable=True),
}
task_routes = {
    'apps.book.tasks.hello_periodic': {'queue': 'low'},
}
task_queue_ha_policy = {'all'} # RabbitMQ
task_queue_max_priority = None # RabbitMQ
# worker_direct = False
task_create_missing_queues = True
task_default_queue = 'celery'
task_default_exchange = 'celery'
task_default_exchange_type = 'direct'
task_default_routing_key = 'celery'
task_default_delivery_mode = 'persistent'

# Broker settings
broker_url = env.str('CELERY_BROKER_URL', default='amqp://')
# broker_read_url = 'amqp://user:pass@broker.example.com:56721'
# broker_write_url = 'amqp://user:pass@broker.example.com:56722'
broker_failover_strategy = 'round-robin'
broker_heartbeat = 120.0
broker_heartbeat_checkrate = 2.0
# broker_use_ssl = {
#   'keyfile': '/var/ssl/private/worker-key.pem',
#   'certfile': '/var/ssl/amqp-server-cert.pem',
#   'ca_certs': '/var/ssl/myca.pem',
#   'cert_reqs': ssl.CERT_REQUIRED
# }
broker_pool_limit = 20
broker_connection_timeout = 4.0
broker_connection_max_retries = 100
broker_login_method = 'AMQPLAIN'
broker_transport_options = {'visibility_timeout': 18000}

# Worker
imports = []
include = []
# worker_concurrency = 4 # Default: Number of CPU cores.
worker_prefetch_multiplier = 4
worker_lost_wait = 10.0
# worker_max_tasks_per_child = # Default: no limit
worker_max_memory_per_child = 20000 # Default: no limit
worker_disable_rate_limits = False
worker_state_db = None
worker_timer_precision = 1.0
worker_enable_remote_control = True

# Event
worker_send_task_events = False
task_send_sent_event = False
event_queue_ttl = 5.0 # amqp
event_queue_expires = 60.0 # amqp
event_queue_prefix = 'celeryev'
event_serializer = 'json'

# Remote Control Commands
control_queue_ttl = 300.0
control_queue_expires = 10.0

# Celery logging
worker_hijack_root_logger = False
worker_log_color = True
worker_log_format = '[%(asctime)s: %(levelname)s/%(processName)s] %(message)s'
worker_task_log_format = '[%(asctime)s: %(levelname)s/%(processName)s] [%(task_name)s(%(task_id)s)] %(message)s'
worker_redirect_stdouts = True
worker_redirect_stdouts_level = 'DEBUG'

# Security
security_key = None
security_certificate = None
security_cert_store = None

# Custom Component Classes (advanced)
# worker_pool = 'prefork'
# worker_pool_restarts = True
# worker_autoscaler = 'celery.worker.autoscale:Autoscaler'
# worker_consumer = 'celery.worker.consumer:Consumer'
# worker_timer = 'kombu.asynchronous.hub.timer:Timer'

# Beat Settings (celery beat)
from celery.schedules import crontab

beat_schedule = {
    'Периодическое приветствие': {
        'task': 'apps.book.tasks.hello_periodic',
        'schedule': crontab(minute='*/5'),
    },
}
beat_scheduler = 'django_celery_beat.schedulers:DatabaseScheduler'
beat_schedule_filename = BASE_PATH / 'tmp' / 'celerybeat-schedule'
beat_sync_every = 0
beat_max_loop_interval = 300

### Application logging
import raven
LOG_LEVEL = env('LOG_LEVEL', cast=str, default='INFO').upper()
RAVEN_DSN = env.str('RAVEN_DSN', default='')
RAVEN_CONFIG = {
    'dsn': RAVEN_DSN,
    'release': raven.fetch_git_sha(BASE_PATH),
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'formatters': {
        'syslog': {
            'format': '%(levelname)s <PID %(process)d> '
                      '%(name)s.%(funcName)s(): %(message)s'
        },
        'verbose': {
            'datefmt': '%Y-%m-%d %H:%M:%S',
            'format': '%(levelname) -10s %(asctime)s '
                      '%(processName) -35s %(name) -35s '
                      '%(funcName) -30s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'formatter': 'verbose',
        },
        'sentry': {
            'level': 'WARNING',
            'filters': ['require_debug_false'],
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        },
    },
    'loggers': {
        '': {
            'level': 'WARNING',
            'handlers': ['console', 'sentry'],
        },
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console', 'sentry'],
            'propagate': False,
        },
        'apps.book': {
            'level': LOG_LEVEL,
            'handlers': ['console', 'sentry'],
            'propagate': False,
        },
    },
}

DATA_UPLOAD_MAX_NUMBER_FIELDS = 20000
